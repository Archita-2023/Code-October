#include <bits/stdc++.h>

#define mp make_pair
#define mt make_tuple
#define fi first
#define se second
#define pb push_back
#define sz(x) (int)((x).size())
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;
typedef pair<i64, i64> pi64;
typedef double ld;

template<class T> bool uin(T &a, T b) { return a > b ? (a = b, true) : false; }
template<class T> bool uax(T &a, T b) { return a < b ? (a = b, true) : false; }

const int maxn = 5100;
vector<ld> p[maxn];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;
#ifdef LOCAL_DEFINE
    freopen("input.txt", "rt", stdin);
#endif

    p[0] = {};
    p[1] = {1.0};
    fore(n, 2, maxn - 1) {
        vector<ld> np = {1.0 / n};
        auto &oldp = p[n - 2];
        forn(i, n - 1) {
            ld q = 0.0;
            if (i + 2 < n) q += oldp[i] * (n - i - 2);
            if (i) q += oldp[i - 1] * i;
            np.pb(q / n);
        }
        sort(all(np));
        p[n] = np;
        if (n <= 10) {
            cerr << n << ": ";
            for (auto x: np) cerr << x << ' ';
            cerr << '\n';
        }
    }

    int T;
    cin >> T;
    while (T--) {
        int n, m;
        cin >> n >> m;
        vvi e(n);
        forn(i, m) {
            int u, v;
            cin >> u >> v;
            --u; --v;
            e[u].pb(v);
        }
        vector<ld> ans(n);
        ans[n - 1] = 1.0;
        ford(v, n - 1)  {
            int K = e[v].size();
            vector<ld> R;
            for (int u: e[v]) R.pb(ans[u]);
            sort(all(R));
            forn(i, K) ans[v] += p[K][i] * R[i];
        }
        cout << ans[0] << '\n';
    }

#ifdef LOCAL_DEFINE
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}
